#!/usr/bin/env node
// 自定义命令行
const program = require('commander')
const downloadGit = require('../lib/download')
const generate = require('../lib/generate')
const process = require('process')
const { rimrifDirectory } = require('../utils/fs')
// 工具
const validate = require('../utils/validate')
const { getProjectPath, getCurrenPath, concatPath } = require('../utils/path')
program.usage('<template-name> [project-name]')
program.parse(process.argv)
// 模板名字
let templateName = ''
// 项目名字
let projectName = ''
// 参数大于两个只支持两个 
if (program.args.length > 1) {
  templateName = program.args[0]
  projectName = program.args[1]
}
// 参数只有一个那就是模板名字
else if (program.args.length === 1) {
  templateName = 'codeUp'
  projectName = program.args[1]
} else if (program.args.length < 1) {
  return program.help()
}

// 模板名字
let templateName = 'codeUp'
// 项目名字
let projectName = program.args[0]
// 校验模板名字是否存在
validate.template.isEmpty(templateName)
// 校验项目名字是否为空
validate.project.isEmpty(projectName)
// 校验项目名字是否有效
validate.project.isLegal(projectName)
// 获取项目地址(本地)
const projectPath = getProjectPath(projectName)
// 获取模板信息
const templateInfo = require(`${__dirname}/../template`)
// 模板地址 (github地址)
const templateUrl = templateInfo[templateName]
// 下载部分
downloadGit(templateUrl, projectName, {}, () => {
  let oldUrl = getCurrenPath()
  // 切换到模板项目进程
  process.chdir(projectName)
  let gitTag = require('git-tag')({ localOnly: true, dir: '/.git' })
  gitTag.latest(function (tag) {
    // console.log('gitTag', tag)
    let tags = tag ? tag : 'v1.3'
    process.chdir(oldUrl)
    let gitUrl = concatPath(getCurrenPath(), projectName, '.git')
    // 删除.git文件夹
    rimrifDirectory(gitUrl)
    generate(
      { projectName, projectPath, templateName, tags },
      { answer: {} },
      (err) => {}
    )
  })
})
